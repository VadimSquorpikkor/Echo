    private byte[] registerData;

    public DataRegister() {
        this.registerData = DEF_DATA_REGISTERS_2;
    }

    /*public byte[] getRegisterData() {
        raskolbasG_momcps();
        raskolbasG_cps();
        raskolbasG_dr();
        byte[] out = Arrays.copyOf(registerData, registerData.length+2);
        byte[] crc = Converter.integerToByte(Converter.calcCRC(registerData));
        out[out.length-1]=crc[0];
        out[out.length-2]=crc[1];
        return out;
    }*/

    /**Берет массив байт БЕЗ CRC, рассчитывает CRC и добавляет полученные байты в конец массива.
     * Полученный массив летит в RSA
     * */
    public byte[] getRegisterData() {
        byte[] dataRaskolbas = raskolbasG_momcps(Arrays.copyOf(registerData, registerData.length));
        dataRaskolbas = raskolbasG_dr(Arrays.copyOf(dataRaskolbas, dataRaskolbas.length));
//        dataRaskolbas = raskolbasG_momcps(registerData);
//        dataRaskolbas = raskolbasG_cps(dataRaskolbas);
//        dataRaskolbas = raskolbasG_dr(dataRaskolbas);
        byte[] out = Arrays.copyOf(dataRaskolbas, dataRaskolbas.length+2);
        byte[] crc = Converter.integerToByte(Converter.calcCRC(dataRaskolbas));
        out[out.length-1]=crc[0];
        out[out.length-2]=crc[1];
        return out;
    }


    /*public byte[] getRegisterData() {
//        raskolbasG_momcps();
        raskolbasG_cps();
        raskolbasG_dr();
        byte[] out = Arrays.copyOf(registerData, registerData.length);
        out = raskolbasG_momcps(out);
        byte[] crc = Converter.integerToByte(Converter.calcCRC(out));
        byte[] out2 = Arrays.copyOf(out, registerData.length+2);
        out2[out2.length-1]=crc[0];
        out2[out2.length-2]=crc[1];
        return out2;
    }*/

    private int getG_momcps() {
        byte[] tempData = new byte[4];
        tempData[3] = registerData[7];
        tempData[2] = registerData[8];
        tempData[1] = registerData[9];
        tempData[0] = registerData[10];
        return (Converter.toInt32(tempData, 0));
    }

    private float getG_cps() {
        byte[] tempData = new byte[4];
        tempData[3] = registerData[11];
        tempData[2] = registerData[12];
        tempData[1] = registerData[13];
        tempData[0] = registerData[14];
        return (Converter.toFloat(tempData, 0));
    }

    private float getG_dr() {
        byte[] tempData = new byte[4];
        tempData[3] = registerData[19];
        tempData[2] = registerData[20];
        tempData[1] = registerData[21];
        tempData[0] = registerData[22];
        return (Converter.toFloat(tempData, 0));
    }

    /**Чтобы G_momcps не был ровной линией, расколбашивает значение +- 0-4%*/
    private byte[] raskolbasG_momcps(byte[] ar) {
        int cps = getG_momcps();
        int maxPercent = 4;//todo процент можно брать из данных
        double percent = Math.random()*maxPercent*2-maxPercent;
        int deltaCps = (int)(cps*(percent/100));
        byte[] bytes = Converter.integerToByte(cps+deltaCps);
        ar[7]  = bytes[3];
        ar[8]  = bytes[2];
        ar[9]  = bytes[1];
        ar[10] = bytes[0];
        return ar;
    }

    private byte[] raskolbasG_cps(byte[] ar) {
        float cps = getG_cps();
        int maxPercent = 4;//todo процент можно брать из данных
        double percent = Math.random()*maxPercent*2-maxPercent;
        float deltaCps = (float)(cps*(percent/100));
        byte[] bytes = Converter.floatToByte(cps+deltaCps);
        registerData[11] = bytes[3];
        registerData[12] = bytes[2];
        registerData[13] = bytes[1];
        registerData[14] = bytes[0];
        return ar;
    }

    private byte[] raskolbasG_dr(byte[] ar) {
        float cps = getG_dr()*1000000;
        int maxPercent = 4;//todo процент можно брать из данных
        double percent = Math.random()*maxPercent*2-maxPercent;
        float deltaCps = (float)(cps*(percent/100));
        byte[] bytes = Converter.floatToByte((cps+deltaCps)/1000000);
        registerData[19] = bytes[3];
        registerData[20] = bytes[2];
        registerData[21] = bytes[1];
        registerData[22] = bytes[0];
        return ar;
    }